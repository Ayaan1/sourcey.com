---
title: Pacman
date: 2014-01-29 00:18:53
tags: 
layout: page
---
      
<!-- 
TODO: compare to current package managers
 -->

# Pacman

<div class="status">    
  <dl>
    <dt>Repository</dt>
    <dd>
      <a class="external" href="https://bitbucket.org/sourcey/libsourcey">https://bitbucket.org/sourcey/libsourcey</a>
    </dd> 
    <dt>Licence</dt>
    <dd>
      LGPL, <a href="/licensing">Sourcey Licence</a>
    </dd>         
    <dt>Dependencies</dt>
    <dd>
      LibSourcey (base, uv, net, json, http, archo), libuv, JsonCpp
    </dd>
  </dl>             
</div>  
    
![Pacman Logo](pacman-logo-120.png "Pacman Logo"){: .align-left} Pacman is a redistributable package manager written C++ that speaks JSON with the server.
It is designed to be embedded within an application to make easy work of installing, updating and uninstalling packages and plug-ins.

There are no shortage or open source <a href="http://en.wikipedia.org/wiki/List_of_software_package_management_systems">package managers</a> out there, but none of them quite fit the bill for a simple embeddable package manager that we could integrate with our native and web platform. We have fallen short on this requirement a number of times over the years, so we decided to build Pacman.
    
Pacman is a default module in the LibSourcey repository. Please download and compile <a class="external" href="/projects/libsourcey">LibSourcey</a> to use Pacman.

## Usage examples

The Pacman API is vey easy use. Some examples are illustrated below:
      
~~~ cpp
`PackageManager::Options options;
// configuration options go here...
PackageManager pacman(options);
pacman.initialize();
        
// query the server for the latest packages
pacman.queryRemotePackages();                
        
// list local (installed) packages
auto litems = pacman.localPackages().items();
for (auto it = litems.begin(); it != litems.end(); ++it) {				
  cout << "Package: " << it->first << endl;
}

// list remote (available) packages
auto ritems = app.remotePackages().items();
for (auto it = ritems.begin(); it != ritems.end(); ++it) {				
  cout << "Package: " << it->first << endl;          
  
  // output the lastest asset information
  it->second->latestAsset().print(cout);	
}                
        
// install a package
pacman.installPackage("SomePackageName");

// update a package (will install if it doesn't exist)
pacman.updatePackage("SomePackageName");

// update / install a list of packages.
// package states are availalbe via callback events
std::vector<std::string> packages;
packages.push_back("SomePackageName");
packages.push_back("IThoughtPacmanWasAGame");        
pacman.installPackages(packages);

// update all packages
pacman.updateAllPackages();

// uninstall a package.
// uninstallPackages() can also be used for multiple packages.
pacman.uninstallPackage("SomePackageName");
~~~ 

Pretty tidy huh? That covers basic Pacman usage. 

These are more methods and features available, feel free to use the method definitions in the source as a reference.

## Client server protocol

The Pacman core does not include a server module, but it should be easy to implement using your chosen web framework. 

We generally use Rails for easy serialization of database objects.
All that is required on the part of the server is to list packages using Pacman's simple protocol and facilitate downloads. 

An example of a server response to a Pacman query is illustrated below. 
Pacman will send a HTTP GET request to the server which will reply with a JSON response that looks like:
      
~~~ javascript
[ { "assets" : [ { "extension" : "zip",
          "file-name" : "Spot-1.0-win32-bin.zip",
          "file-size" : "3261705",
          "mirrors" : [ "http://localhost:3000/archives/417/Spot-1.0-win32-bin.zip" ],
          "name" : "Spot",
          "platform" : "win32",
          "standalone" : "true",
          "type" : "bin",
          "version" : "1.0"
        },
        { "extension" : "zip",
          "file-name" : "Spot-1.1-win32-bin.zip",
          "file-size" : "3261705",
          "mirrors" : [ "http://localhost:3000/archives/418/Spot-1.1-win32-bin.zip" ],
          "name" : "Spot",
          "platform" : "win32",
          "standalone" : "true",
          "type" : "bin",
          "version" : "1.1"
        }
      ],
    "author" : "Sourcey",
    "id" : 9,
    "name" : "Spot",
    "title" : "Spot",
    "type" : "Project"
  },
  { "assets" : [ { "extension" : "zip",
          "file-name" : "SurveillanceMode-0.9.0-Spot-1.0-win32-bin.zip",
          "file-size" : "761951",
          "mirrors" : [ "http://localhost:3000/archives/439/SurveillanceMode-0.9.0-Spot-1.0-win32-bin.zip" ],
          "name" : "SurveillanceMode",
          "platform" : "win32",
          "project-name" : "Spot",
          "project-version" : "1.0",
          "standalone" : "false",
          "type" : "bin",
          "version" : "0.9.0"
        } ],
    "author" : "Sourcey",
    "id" : 7,
    "name" : "SurveillanceMode",
    "title" : "Surveillance Mode Plugin",
    "type" : "Plugin"
  },
  { "assets" : [ { "extension" : "zip",
          "file-name" : "MediaProvider-0.9.0-Spot-1.0-win32-bin.zip",
          "file-size" : "136459",
          "mirrors" : [ "http://localhost:3000/archives/435/MediaProvider-0.9.0-Spot-1.0-win32-bin.zip" ],
          "name" : "MediaProvider",
          "platform" : "win32",
          "project-name" : "Spot",
          "project-version" : "1.0",
          "standalone" : "false",
          "type" : "bin",
          "version" : "0.9.0"
        } ],
    "author" : "Sourcey",
    "id" : 19,
    "name" : "MediaProvider",
    "title" : "Media Provider",
    "type" : "Plugin"
  }
]
~~~       
## Things to do

There are a few features we have not had time to implement yet which are listed in the TODO file in the source folder.
If you're able to implement any of the those features then send a push request our way. 

