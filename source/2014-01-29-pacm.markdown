---
title: Pacm
date: 2014-01-29 00:18:53
tags: 
layout: page
---
      
<!-- 
TODO: compare to current package managers
 -->

# Pacm

Repository
: [https://github.com/sourcey/libsourcey](https://github.com/sourcey/libsourcey)

Licence
: LGPL, <a href="/licence">Pro Licence</a>

Dependencies
: LibSourcey (base, uv, net, json, http, archo), libuv, JsonCpp
{: .status}
    
![Pacm Logo](pacm-logo-120.png "Pacm Logo"){: .align-left} Pacm is a redistributable package manager written C++ that speaks JSON with the server.
It is designed to be embedded within an application to make easy work of installing, updating and uninstalling packages and plug-ins.

There is no shortage or open source [package managers](http://en.wikipedia.org/wiki/List_of_software_package_management_systems) out there, but none of them quite fit the bill for an embeddable native package manager that could be controlled from the cloud. Rather than continue building with a square wheel, we decided to build a new one.
    
Pacm is included a default module in the LibSourcey repository, so please download and compile [LibSourcey](libsourcey) in order to use Pacm.

## Usage examples

The Pacm API is vey easy use. Some examples are illustrated below:
      
~~~ cpp
PackageManager::Options options;
// configuration options go here...
PackageManager pacm(options);
pacm.initialize();
        
// query the server for the latest packages
pacm.queryRemotePackages();                
        
// list local (installed) packages
auto litems = pacm.localPackages().items();
for (auto it = litems.begin(); it != litems.end(); ++it) {				
  cout << "Package: " << it->first << endl;
}

// list remote (available) packages
auto ritems = app.remotePackages().items();
for (auto it = ritems.begin(); it != ritems.end(); ++it) {				
  cout << "Package: " << it->first << endl;          
  
  // output the lastest asset information
  it->second->latestAsset().print(cout);	
}                
        
// install a package
pacm.installPackage("SomePackageName");

// update a package (will install if it doesn't exist)
pacm.updatePackage("SomePackageName");

// update / install a list of packages.
// package states are availalbe via callback events
std::vector<std::string> packages;
packages.push_back("SomePackageName");
packages.push_back("IThoughtPacmWasAGame");        
pacm.installPackages(packages);

// update all packages
pacm.updateAllPackages();

// uninstall a package.
// uninstallPackages() can also be used for multiple packages.
pacm.uninstallPackage("SomePackageName");
~~~ 

Pretty tidy huh? That covers basic Pacm usage. 

These are plenty of other methods and features available, just check out the documentation for the method definitions in the [source code](https://github.com/sourcey/libsourcey/blob/master/src/pacm/include/scy/pacm/packagemanager.h) for a reference.

## Client server protocol

The Pacm core does not include a server module, but it should be easy to implement using your chosen web framework. All that is required on the server-side is to list packages using Pacm's simple JSON protocol. We generally use Rails for easy serialization of database objects. 

An example of a server response to a Pacm query is illustrated below. Pacm will send a HTTP GET request to the server which will reply with a JSON response that looks like:
      
~~~ javascript
[ { "assets" : [ { "extension" : "zip",
          "file-name" : "Spot-1.0-win32-bin.zip",
          "file-size" : "3261705",
          "mirrors" : [ "http://localhost:3000/archives/417/Spot-1.0-win32-bin.zip" ],
          "name" : "Spot",
          "platform" : "win32",
          "standalone" : "true",
          "type" : "bin",
          "version" : "1.0"
        },
        { "extension" : "zip",
          "file-name" : "Spot-1.1-win32-bin.zip",
          "file-size" : "3261705",
          "mirrors" : [ "http://localhost:3000/archives/418/Spot-1.1-win32-bin.zip" ],
          "name" : "Spot",
          "platform" : "win32",
          "standalone" : "true",
          "type" : "bin",
          "version" : "1.1"
        }
      ],
    "author" : "Sourcey",
    "id" : 9,
    "name" : "Spot",
    "title" : "Spot",
    "type" : "Project"
  },
  { "assets" : [ { "extension" : "zip",
          "file-name" : "SurveillanceMode-0.9.0-Spot-1.0-win32-bin.zip",
          "file-size" : "761951",
          "mirrors" : [ "http://localhost:3000/archives/439/SurveillanceMode-0.9.0-Spot-1.0-win32-bin.zip" ],
          "name" : "SurveillanceMode",
          "platform" : "win32",
          "project-name" : "Spot",
          "project-version" : "1.0",
          "standalone" : "false",
          "type" : "bin",
          "version" : "0.9.0"
        } ],
    "author" : "Sourcey",
    "id" : 7,
    "name" : "SurveillanceMode",
    "title" : "Surveillance Mode Plugin",
    "type" : "Plugin"
  },
  { "assets" : [ { "extension" : "zip",
          "file-name" : "MediaProvider-0.9.0-Spot-1.0-win32-bin.zip",
          "file-size" : "136459",
          "mirrors" : [ "http://localhost:3000/archives/435/MediaProvider-0.9.0-Spot-1.0-win32-bin.zip" ],
          "name" : "MediaProvider",
          "platform" : "win32",
          "project-name" : "Spot",
          "project-version" : "1.0",
          "standalone" : "false",
          "type" : "bin",
          "version" : "0.9.0"
        } ],
    "author" : "Sourcey",
    "id" : 19,
    "name" : "MediaProvider",
    "title" : "Media Provider",
    "type" : "Plugin"
  }
]
~~~    

## Contributing

1. [Fork LibSourcey on Github](https://github.com/sourcey/libsourcey)
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create new Pull Request

## Issues

If you find any bugs or issues please use the new [Github issue tracker](https://github.com/sourcey/libsourcey/issues).

<!--   
## Things to do

There are a few features we have not had time to implement yet which are listed in the TODO file in the source folder.
If you're able to implement any of the those features then send a push request our way. 
-->

